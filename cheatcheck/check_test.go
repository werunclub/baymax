package cheatcheck

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"testing"
	"time"

	"github.com/werunclub/baymax/v2/util"
)

// 计步数据排序
type stepsSorter [][]int

// 计算长度
func (a stepsSorter) Len() int {
	return len(a)
}

// 交换顺序
func (a stepsSorter) Swap(i, j int) {
	a[i], a[j] = a[j], a[i]
}

// 从大到小排序
func (a stepsSorter) Less(i, j int) bool {
	return a[j][0] > a[i][0]
}

func indexToMinute(index int) int {
	return index/6*100 + index%6*10
}

func read(path string) string {
	fi, err := os.Open(path)
	if err != nil {
		panic(err)
	}
	defer fi.Close()
	fd, err := ioutil.ReadAll(fi)
	return string(fd)
}

func readDataFromFile(path string) []int {
	data := read(path)
	steps := strings.Split(data, "\n")

	stepInts := make([]int, 0, len(steps))
	for i := 0; i < len(steps); i++ {
		if steps[i] != "" {
			j, err := strconv.Atoi(steps[i])
			if err == nil {
				stepInts = append(stepInts, j)
			}
		}
	}

	return stepInts
}

func TestCheatCheck(t *testing.T) {

	err := filepath.Walk("./test_data", func(path string, info os.FileInfo, err error) error {
		fmt.Printf("\n\nfile: %s\n", path)

		data := readDataFromFile(path)

		cheatIndexes, err1 := StepsCheatCheck(data)
		if err1 != nil {
			t.Errorf("error: %s", err1.Error())
		}

		for _, item := range cheatIndexes {
			fmt.Printf("[%d, %d], ", item[0], item[1])
		}
		return nil
	})

	if err != nil {
		t.Error(err.Error())
	}
}

func TestCheatCheck2(t *testing.T) {
	dataRaw := "[[1217,107],[1218,152],[1219,151],[1220,76],[1221,151],[1222,154],[1223,140],[1224,105],[1225,128],[1226,126],[1227,127],[1228,129],[1229,126],[1230,128],[1231,134],[1232,124],[1233,133],[1234,123],[1235,122],[1236,120],[1237,123],[1238,121],[1239,121],[1240,123],[1241,109],[1242,2],[1243,25],[1244,67],[1245,0],[1246,29],[1247,35],[1248,0],[1249,0],[1250,0],[1251,0],[1252,0],[1253,0],[1254,0],[1255,0],[1256,37],[1257,22],[1258,0],[1259,0],[1300,0],[1301,0],[1302,0],[1303,0],[1304,40],[1305,61],[1306,0],[1307,17],[1308,50],[1309,131],[1310,129],[1311,130],[1312,131],[1313,132],[1314,125],[1315,21],[1316,0],[1317,0],[1318,0],[1319,0],[1320,0],[1321,0],[1322,0],[1323,0],[1324,0],[1325,0],[1326,0],[1327,0],[1328,0],[1334,0],[1335,37],[1336,105],[1337,103],[1338,104],[1339,103],[1340,105],[1341,103],[1342,100],[1343,105],[1344,109],[1345,116],[1346,124],[1347,127],[1348,127],[1349,118],[1350,119],[1351,125],[1352,83],[1353,148],[1354,155],[1355,150],[1356,142],[1357,151],[1358,155],[1359,153],[1400,155],[1401,152],[1402,140],[1403,150],[1404,154],[1405,154],[1406,147],[1407,143],[1408,138],[1409,135],[1410,135],[1411,136],[1412,44],[1413,75],[1414,104],[1415,104],[1416,104],[1417,104],[1418,104],[1419,105],[1420,103],[1421,104],[1422,106],[1423,103],[1424,104],[1425,104],[1426,104],[1427,104],[1428,104],[1429,105],[1430,104],[1431,104],[1432,104],[1433,104],[1434,104],[1435,105],[1436,104],[1437,103],[1438,104],[1439,105],[1440,104],[1441,104],[1442,104],[1443,104],[1444,105],[1445,104],[1446,104],[1447,105],[1448,104],[1449,104],[1450,104],[1451,104],[1452,104],[1453,104],[1454,104],[1455,105],[1456,104],[1457,104],[1458,104],[1459,104],[1500,105],[1501,105],[1502,102],[1503,105],[1504,104],[1505,105],[1506,103],[1507,105],[1508,104],[1509,104],[1510,104],[1511,105],[1512,104],[1513,103],[1514,105],[1515,104],[1516,103],[1517,105],[1518,104],[1519,104],[1520,104],[1521,105],[1522,105],[1523,103],[1524,105],[1525,103],[1526,104],[1527,104],[1528,105],[1529,104],[1530,105],[1531,104],[1532,104],[1533,104],[1534,104],[1535,104],[1536,105],[1537,104],[1538,104],[1539,105],[1540,104],[1541,104],[1542,103],[1543,105],[1544,104],[1545,105],[1546,104],[1547,104],[1548,105],[1549,104],[1550,104],[1551,104],[1552,104],[1553,104],[1554,104],[1555,104],[1556,105],[1557,104],[1558,104],[1559,104],[1600,105],[1601,104],[1602,105],[1603,103],[1604,104],[1605,105],[1606,104],[1607,104],[1608,105],[1609,103],[1610,104],[1611,104],[1612,105],[1613,105],[1622,0],[1623,106],[1624,104],[1625,137],[1626,131],[1627,124],[1628,118],[1629,119],[1630,120],[1631,118],[1632,116],[1633,119],[1634,116],[1635,117],[1636,110],[1637,112],[1638,110],[1639,112],[1640,104],[1641,125],[1642,119],[1643,110],[1644,105],[1645,104],[1646,106],[1647,116],[1648,117],[1649,110],[1650,103],[1651,103],[1652,105],[1653,103],[1654,103],[1655,105],[1656,119],[1657,117],[1658,115],[1659,115],[1700,116],[1701,103],[1702,104],[1703,103],[1704,104],[1705,110],[1706,104],[1707,104],[1708,103],[1709,104],[1710,105],[1711,108],[1712,104],[1713,104],[1714,103],[1715,105],[1716,103],[1717,104],[1718,103],[1719,104],[1720,104],[1721,104],[1722,104],[1723,104],[1724,103],[1725,104],[1726,104],[1727,104],[1728,104],[1729,104],[1730,104],[1731,103],[1732,104],[1733,104],[1734,104],[1735,104],[1736,105],[1737,104],[1738,104],[1739,104],[1740,105],[1741,104],[1742,103],[1743,104],[1744,104],[1745,104],[1746,104],[1747,103],[1748,104],[1749,104],[1750,104],[1751,105],[1752,104],[1753,104],[1754,104],[1755,104],[1756,105],[1757,103],[1758,104],[1759,104],[1800,123],[1801,113],[1802,111],[1803,108],[1804,107],[1805,105],[1806,103],[1807,104],[1808,103],[1809,105],[1810,103],[1811,104],[1812,104],[1813,104],[1814,103],[1815,104],[1816,104],[1817,104],[1818,80]]"

	data := make([][]int, 0, 100)
	if err := json.Unmarshal([]byte(dataRaw), &data); err != nil {
		t.Error(err)
		return
	}

	// 按10分钟分段汇总
	stepsRange10 := make(map[int]int)

	for i := 0; i < 144; i++ {
		t := util.TimeAccurateToDay(time.Now()).Add(time.Duration(i*10) * time.Minute)
		intM, _ := strconv.Atoi(t.Format("1504"))
		stepsRange10[intM] = 0
	}

	for _, item := range data {
		stepsRange10[item[0]/10*10] += item[1]
	}

	points := make([][]int, 0, 144)
	for minute, steps := range stepsRange10 {
		points = append(points, []int{minute, steps})
	}

	// 重新排序
	sort.Sort(stepsSorter(points))

	steps := make([]int, 0, len(points))
	for _, item := range points {
		// fmt.Printf("\npoint: %d, %d", item[0], item[1])
		fmt.Printf("%d\n", item[1])
		steps = append(steps, item[1])
	}

	// fmt.Printf("\ndata: %v", data)
	// fmt.Printf("\npoints: %v", points)
	// fmt.Printf("\nsteps: %v", steps)

	// 作弊检查
	cheatIndexes, err := StepsCheatCheck(steps)
	if err != nil {
		t.Error(err)
		return
	}

	cheatSteps := 0
	cheatPeriods := make([][]int, 0, len(cheatIndexes))

	indexToMinute := func(index int) int {
		return index/6*100 + index%6*10
	}

	for _, index := range cheatIndexes {
		for i := index[0]; i < index[1]+1; i++ {
			cheatSteps += steps[i]
		}

		cheatPeriods = append(cheatPeriods, []int{indexToMinute(index[0]), indexToMinute(index[1])})
	}

	// fmt.Printf("\nstepsRange10: %v\n", stepsRange10)
	fmt.Printf("\nheatIndexes: %v\n", cheatIndexes)
	fmt.Printf("\nperiods: %v\n\n", cheatPeriods)
}
